# #
# The MIT License (MIT)
#
# Copyright (c) 2014 Stefan Wendler
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
# THE SOFTWARE.
# #

__author__ = 'Stefan Wendler, sw@kaltpost.de'

"""
Test case for rendering schedule into plug-format

"""

# import plug API
from ediplug.smartplug import SmartPlug

# for unit test
import unittest


class TestRenderSchedule(unittest.TestCase):

    def setUp(self):
        self.sp = SmartPlug(None, None)

    def test_render_schedule_empty(self):
        rs = self.sp._render_schedule([])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_edges(self):

        rs = self.sp._render_schedule([[[0, 0], [1, 0]], [[23, 00], [0, 0]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs, 'FFFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000FFFFFFFFFFFFFFF',
                         'Wrong values')

    def test_render_schedule_short_interval_8(self):
        rs = self.sp._render_schedule([[[0, 0], [0, 1]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '800000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_C(self):
        rs = self.sp._render_schedule([[[0, 0], [0, 2]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         'C00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_E(self):
        rs = self.sp._render_schedule([[[0, 0], [0, 3]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         'E00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_F(self):
        rs = self.sp._render_schedule([[[0, 0], [0, 4]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         'F00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_7(self):
        rs = self.sp._render_schedule([[[0, 1], [1, 0]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '7FFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_3(self):
        rs = self.sp._render_schedule([[[0, 2], [1, 0]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '3FFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_1(self):
        rs = self.sp._render_schedule([[[0, 3], [1, 0]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '1FFFFFFFFFFFFFF000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_4(self):
        rs = self.sp._render_schedule([[[0, 1], [0, 2]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '400000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_6(self):
        rs = self.sp._render_schedule([[[0, 1], [0, 3]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '600000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_2(self):
        rs = self.sp._render_schedule([[[0, 2], [0, 3]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '200000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

    def test_render_schedule_short_interval_seq(self):
        rs = self.sp._render_schedule([[[13, 2], [13, 3]], [[13, 4], [13, 5]], [[13, 6], [13, 7]]])

        print(("rendered result ist: ", rs))

        self.assertEqual(rs,
                         '0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000002A0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000',
                         'Wrong values')

if __name__ == '__main__':
    suite = unittest.TestLoader().loadTestsFromTestCase(TestRenderSchedule)
    unittest.TextTestRunner(verbosity=2).run(suite)